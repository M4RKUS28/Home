import logging
import os
from dotenv import load_dotenv

logging.basicConfig(level=logging.INFO)


load_dotenv()


# Configuration for the application
# Password policy
# These settings are used to enforce password complexity requirements
MIN_PASSWORD_LENGTH = 3
REQUIRE_UPPERCASE = False
REQUIRE_LOWERCASE = False
REQUIRE_DIGIT = False
REQUIRE_SPECIAL_CHAR = False
SPECIAL_CHARACTERS_REGEX_PATTERN = r"[!@#$%^&*()_+\-=\[\]{};':\"\\|,.<>\/?~`]"


# JWT settings
SECRET_KEY = os.getenv("SECRET_KEY", "a_very_secret_key_please_change_me")
ALGORITHM = "HS256"
ACCESS_TOKEN_EXPIRE_MINUTES = int(os.getenv("ACCESS_TOKEN_EXPIRE_MINUTES", "2440"))


# Database settings
DB_USER = os.getenv("DB_USER", "your_db_user")
DB_PASSWORD = os.getenv("DB_PASSWORD", "your_db_password")
DB_HOST = os.getenv("DB_HOST", "localhost")
DB_PORT = os.getenv("DB_PORT", "3306") # Default MySQL port
DB_NAME = os.getenv("DB_NAME", "your_app_db")

SQLALCHEMY_DATABASE_URL = f"mysql+mysqlconnector://{DB_USER}:{DB_PASSWORD}@{DB_HOST}:{DB_PORT}/{DB_NAME}"
# For SQLite (testing):
# SQLALCHEMY_DATABASE_URL = "sqlite:///./test.db"
# For PostgreSQL:
# SQLALCHEMY_DATABASE_URL = f"postgresql://{DB_USER}:{DB_PASSWORD}@{DB_HOST}:{DB_PORT}/{DB_NAME}"

# DB Pooling Settings
DB_POOL_RECYCLE = int(os.getenv("DB_POOL_RECYCLE", 3600))
DB_POOL_PRE_PING = os.getenv("DB_POOL_PRE_PING", "true").lower() == "true"
DB_POOL_SIZE = int(os.getenv("DB_POOL_SIZE", 5))
DB_MAX_OVERFLOW = int(os.getenv("DB_MAX_OVERFLOW", 10))
DB_CONNECT_TIMEOUT = int(os.getenv("DB_CONNECT_TIMEOUT", 10))  # Optionalfrom sqlalchemy import create_engine
from sqlalchemy.ext.declarative import declarative_base
from sqlalchemy.orm import sessionmaker
from dotenv import load_dotenv

from ..config import settings

engine = create_engine(
    settings.SQLALCHEMY_DATABASE_URL,
    pool_recycle=settings.DB_POOL_RECYCLE,
    pool_pre_ping=settings.DB_POOL_PRE_PING,
    pool_size=settings.DB_POOL_SIZE,
    max_overflow=settings.DB_MAX_OVERFLOW,
    connect_args={"connect_timeout": settings.DB_CONNECT_TIMEOUT}
)

SessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)

Base = declarative_base()

def get_db():
    db = SessionLocal()
    try:
        yield db
    finally:
        db.close()from sqlalchemy import Boolean, Column, Integer, String
from ..db.database import Base

class User(Base):
    __tablename__ = "users"

    id = Column(Integer, primary_key=True, index=True)
    username = Column(String(50), unique=True, index=True, nullable=False)
    email = Column(String(100), unique=True, index=True, nullable=False)
    hashed_password = Column(String(100), nullable=False)
    is_active = Column(Boolean, default=True)
    is_admin = Column(Boolean, default=False) # Added for admin rolefrom fastapi import APIRouter, Depends, HTTPException, status
from sqlalchemy.orm import Session
from typing import List

from ..schemas import user as user_schemas # For Pydantic models
from ..models import db_user as user_model   # For SQLAlchemy model
from ..utils import auth
from ..db.database import get_db

router = APIRouter(
    prefix="/users",
    tags=["users"],
    responses={404: {"description": "Not found"}},
)

@router.get("/", response_model=List[user_schemas.User], dependencies=[Depends(auth.get_current_admin_user)])
async def read_users(
    skip: int = 0,
    limit: int = 100,
    db: Session = Depends(get_db)
):
    """
    Retrieve all users. Only accessible by admin users.
    """
    users = db.query(user_model.User).offset(skip).limit(limit).all()
    return users

@router.get("/{user_id}", response_model=user_schemas.User)
async def read_user(
    user_id: int,
    db: Session = Depends(get_db),
    current_user: user_model.User = Depends(auth.get_current_active_user)
):
    """
    Retrieve a specific user by ID.
    Admin users can retrieve any user. Regular users can only retrieve their own profile.
    """
    if not current_user.is_admin and current_user.id != user_id:
        raise HTTPException(status_code=status.HTTP_403_FORBIDDEN, detail="Not authorized to access this user")
    
    user = db.query(user_model.User).filter(user_model.User.id == user_id).first()
    if user is None:
        raise HTTPException(status_code=status.HTTP_404_NOT_FOUND, detail="User not found")
    return user

@router.put("/{user_id}", response_model=user_schemas.User)
async def update_user(
    user_id: int,
    user_update: user_schemas.UserUpdate,
    db: Session = Depends(get_db),
    current_user: user_model.User = Depends(auth.get_current_active_user)
):
    """
    Update a user's details.
    Admin users can update any user. Regular users can only update their own profile.
    Admin status can only be changed by other admins.
    """
    db_user = db.query(user_model.User).filter(user_model.User.id == user_id).first()
    if db_user is None:
        raise HTTPException(status_code=status.HTTP_404_NOT_FOUND, detail="User not found")

    if not current_user.is_admin and current_user.id != user_id:
        raise HTTPException(status_code=status.HTTP_403_FORBIDDEN, detail="Not authorized to update this user")

    update_data = user_update.model_dump(exclude_unset=True) # Pydantic V2
    # For Pydantic V1: update_data = user_update.dict(exclude_unset=True)


    if "username" in update_data:
        existing_user = db.query(user_model.User).filter(user_model.User.username == update_data["username"]).first()
        if existing_user and existing_user.id != user_id:
            raise HTTPException(status_code=status.HTTP_400_BAD_REQUEST, detail="Username already registered")
        db_user.username = update_data["username"]
    
    if "email" in update_data:
        existing_user = db.query(user_model.User).filter(user_model.User.email == update_data["email"]).first()
        if existing_user and existing_user.id != user_id:
            raise HTTPException(status_code=status.HTTP_400_BAD_REQUEST, detail="Email already registered")
        db_user.email = update_data["email"]

    if "password" in update_data and update_data["password"]:
        db_user.hashed_password = auth.get_password_hash(update_data["password"])

    if "is_active" in update_data and current_user.is_admin:
        db_user.is_active = update_data["is_active"]
    elif "is_active" in update_data and not current_user.is_admin:
        raise HTTPException(status_code=status.HTTP_403_FORBIDDEN, detail="Only admins can change active status")


    if "is_admin" in update_data and current_user.is_admin:
        # Prevent admin from accidentally removing their own admin status if they are the only admin
        if db_user.id == current_user.id and not update_data["is_admin"]:
             admin_count = db.query(user_model.User).filter(user_model.User.is_admin == True).count()
             if admin_count <= 1:
                 raise HTTPException(status_code=status.HTTP_400_BAD_REQUEST, detail="Cannot remove the last admin's privileges")
        db_user.is_admin = update_data["is_admin"]
    elif "is_admin" in update_data and not current_user.is_admin:
         raise HTTPException(status_code=status.HTTP_403_FORBIDDEN, detail="Only admins can change admin status")

    db.commit()
    db.refresh(db_user)
    return db_user


@router.delete("/{user_id}", response_model=user_schemas.User, dependencies=[Depends(auth.get_current_admin_user)])
async def delete_user(
    user_id: int,
    db: Session = Depends(get_db),
    current_user: user_model.User = Depends(auth.get_current_admin_user) # Ensure admin is deleting
):
    """
    Delete a user. Only accessible by admin users.
    Admins cannot delete themselves.
    """
    db_user = db.query(user_model.User).filter(user_model.User.id == user_id).first()
    if db_user is None:
        raise HTTPException(status_code=status.HTTP_404_NOT_FOUND, detail="User not found")

    if db_user.id == current_user.id:
        raise HTTPException(status_code=status.HTTP_400_BAD_REQUEST, detail="Admins cannot delete themselves")

    db.delete(db_user)
    db.commit()
    return db_userfrom typing import Optional
from pydantic import BaseModel

# Token Schemas (remain the same)
class Token(BaseModel):
    access_token: str
    token_type: str
    user_id: int
    username: str
    is_admin: bool

class TokenData(BaseModel):
    username: Optional[str] = None
    user_id: Optional[int] = None
    is_admin: Optional[bool] = None

class LoginForm(BaseModel):
    username: str
    password: str# app/schemas.py
from pydantic import BaseModel, EmailStr, Field, field_validator # Make sure field_validator is imported
from typing import Optional, List
import re
from ..config.settings import MIN_PASSWORD_LENGTH, REQUIRE_UPPERCASE, REQUIRE_LOWERCASE, REQUIRE_DIGIT, REQUIRE_SPECIAL_CHAR

class UserBase(BaseModel):
    username: str
    email: EmailStr

class UserCreate(UserBase):
    password: str = Field(
        ..., # Ellipsis means the field is required
        # min_length=MIN_PASSWORD_LENGTH, # This will be implicitly checked by our validator too
        description=f"Password must be at least {MIN_PASSWORD_LENGTH} characters long and meet complexity requirements."
    )

    @field_validator('password')
    @classmethod
    def password_complexity_checks(cls, v: str) -> str:
        # Pydantic's Field(min_length=...) would handle this,
        # but we include it here for a unified error message if preferred.
        if len(v) < MIN_PASSWORD_LENGTH:
            raise ValueError(f"Password must be at least {MIN_PASSWORD_LENGTH} characters long.")

        errors: List[str] = []
        if REQUIRE_UPPERCASE and not re.search(r"[A-Z]", v):
            errors.append("must contain at least one uppercase letter")
        if REQUIRE_LOWERCASE and not re.search(r"[a-z]", v):
            errors.append("must contain at least one lowercase letter")
        if REQUIRE_DIGIT and not re.search(r"\d", v):
            errors.append("must contain at least one digit")
        if REQUIRE_SPECIAL_CHAR and not re.search(SPECIAL_CHARACTERS_REGEX_PATTERN, v):
            errors.append(f"must contain at least one special character (e.g., !@#$%)")
        
        if errors:
            # Pydantic expects a ValueError to be raised for validation failures
            # The message will be part of the 422 response detail.
            error_summary = "; ".join(errors)
            raise ValueError(f"Password does not meet complexity requirements: {error_summary}.")
        return v

class UserUpdate(BaseModel):
    username: Optional[str] = None
    email: Optional[EmailStr] = None
    password: Optional[str] = Field(
        default=None, # Password is optional on update
        description="New password (if changing) must meet complexity requirements."
    )
    is_active: Optional[bool] = None
    is_admin: Optional[bool] = None # Only updatable by admins

    @field_validator('password')
    @classmethod
    def update_password_complexity_checks(cls, v: Optional[str]) -> Optional[str]:
        if v is None: # If password is not being updated, skip validation
            return v
        
        # If password is provided (not None), it must meet all complexity rules.
        if len(v) < MIN_PASSWORD_LENGTH:
            raise ValueError(f"New password must be at least {MIN_PASSWORD_LENGTH} characters long.")

        errors: List[str] = []
        if REQUIRE_UPPERCASE and not re.search(r"[A-Z]", v):
            errors.append("must contain at least one uppercase letter")
        if REQUIRE_LOWERCASE and not re.search(r"[a-z]", v):
            errors.append("must contain at least one lowercase letter")
        if REQUIRE_DIGIT and not re.search(r"\d", v):
            errors.append("must contain at least one digit")
        if REQUIRE_SPECIAL_CHAR and not re.search(SPECIAL_CHARACTERS_REGEX_PATTERN, v):
            errors.append(f"must contain at least one special character (e.g., !@#$%)")
        
        if errors:
            error_summary = "; ".join(errors)
            raise ValueError(f"New password does not meet complexity requirements: {error_summary}.")
        return v

class User(UserBase): # Your existing User schema for responses
    id: int
    is_active: bool
    is_admin: bool

    class Config:
        from_attributes = Truefrom datetime import datetime, timedelta, timezone
from typing import Optional
from jose import JWTError, jwt
from passlib.context import CryptContext
from fastapi import Depends, HTTPException, status
from fastapi.security import OAuth2PasswordBearer
from sqlalchemy.orm import Session


# Import the SQLAlchemy User model module correctly
from ..models import db_user as user_model # Use a consistent alias for the SQLAlchemy model module
# Import Pydantic schemas (only TokenData is directly used here)
from ..schemas import token as token_schema # Alias for Pydantic token schemas
from ..db.database import get_db

# Configuration
from ..config.settings import SECRET_KEY, ALGORITHM, ACCESS_TOKEN_EXPIRE_MINUTES

# Password-Hashing
pwd_context = CryptContext(schemes=["bcrypt"], deprecated="auto")

# OAuth2 with Password Flow
oauth2_scheme = OAuth2PasswordBearer(tokenUrl="token") # Relative URL for token endpoint

def verify_password(plain_password, hashed_password):
    return pwd_context.verify(plain_password, hashed_password)

def get_password_hash(password):
    return pwd_context.hash(password)

def authenticate_user(db: Session, username: str, password: str) -> Optional[user_model.User]:
    authenticated_db_user = db.query(user_model.User).filter(user_model.User.username == username).first()
    if not authenticated_db_user:
        return None
    if not verify_password(password, authenticated_db_user.hashed_password):
        return None
    return authenticated_db_user # Return the SQLAlchemy user model instance

def create_access_token(data: dict, expires_delta: Optional[timedelta] = None):
    to_encode = data.copy()
    if expires_delta:
        expire = datetime.now(timezone.utc) + expires_delta
    else:
        expire = datetime.now(timezone.utc) + timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES)
    to_encode.update({"exp": expire})
    encoded_jwt = jwt.encode(to_encode, SECRET_KEY, algorithm=ALGORITHM)
    return encoded_jwt

async def get_current_user(token: str = Depends(oauth2_scheme), db: Session = Depends(get_db)) -> user_model.User:
    credentials_exception = HTTPException(
        status_code=status.HTTP_401_UNAUTHORIZED,
        detail="Could not validate credentials",
        headers={"WWW-Authenticate": "Bearer"},
    )
    try:
        payload = jwt.decode(token, SECRET_KEY, algorithms=[ALGORITHM])
        username: str = payload.get("sub")
        user_id: int = payload.get("user_id")
        is_admin: bool = payload.get("is_admin", False)
        if username is None or user_id is None:
            raise credentials_exception
        # token_data = token.TokenData(username=username, user_id=user_id, is_admin=is_admin)
    except JWTError:
        raise credentials_exception
    
    user = db.query(user_model.User).filter(user_model.User.id == user_id).first()
    if user is None:
        raise credentials_exception
    return user

async def get_current_active_user(current_db_user: user_model.User = Depends(get_current_user)) -> user_model.User:
    if not current_db_user.is_active:
        raise HTTPException(status_code=status.HTTP_400_BAD_REQUEST, detail="Inactive user")
    return current_db_user

async def get_current_admin_user(current_db_user: user_model.User = Depends(get_current_active_user)) -> user_model.User:
    if not current_db_user.is_admin:
        raise HTTPException(
            status_code=status.HTTP_403_FORBIDDEN,
            detail="The user doesn't have enough privileges"
        )
    return current_db_userfrom fastapi import FastAPI, Depends, HTTPException, status, APIRouter # Import APIRouter
from fastapi.middleware.cors import CORSMiddleware
from fastapi.security import OAuth2PasswordRequestForm
from sqlalchemy.orm import Session
from datetime import timedelta

from .schemas import user as user_schema
from .models import db_user as user_model
from .schemas import token as token_schema

from .utils import auth
from .db.database import engine, get_db
from .routers import users # Your existing users router

# Create database tables
user_model.Base.metadata.create_all(bind=engine)

# Create the main app instance
app = FastAPI(title="User Management API", root_path="/api")

# CORS Configuration (remains the same)
origins = [
    "http://localhost:3000",
    "http://localhost:8000",
]
app.add_middleware(
    CORSMiddleware,
    allow_origins=origins,
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# Create a root router for the /api prefix
api_router = APIRouter()

# Include your existing routers under this api_router
api_router.include_router(users.router)
# If you had other routers (e.g., items_router), you would include them here too:
# api_router.include_router(items_router, prefix="/items", tags=["items"])


# Define /token and /register directly under api_router if you want them prefixed
@api_router.post("/token", response_model=token_schema.Token, tags=["authentication"])
async def login_for_access_token(
    form_data: OAuth2PasswordRequestForm = Depends(),
    db: Session = Depends(get_db)
):
    user = auth.authenticate_user(db, form_data.username, form_data.password)
    if not user:
        raise HTTPException(
            status_code=status.HTTP_401_UNAUTHORIZED,
            detail="Incorrect username or password",
            headers={"WWW-Authenticate": "Bearer"},
        )
    if not user.is_active:
        raise HTTPException(
            status_code=status.HTTP_400_BAD_REQUEST,
            detail="Inactive user",
        )
    
    access_token_expires = timedelta(minutes=auth.ACCESS_TOKEN_EXPIRE_MINUTES)
    access_token = auth.create_access_token(
        data={"sub": user.username, "user_id": user.id, "is_admin": user.is_admin},
        expires_delta=access_token_expires,
    )
    
    return {
        "access_token": access_token,
        "token_type": "bearer",
        "user_id": user.id,
        "username": user.username,
        "is_admin": user.is_admin
    }

@api_router.post("/register", response_model=user_schema.User, status_code=status.HTTP_201_CREATED, tags=["Authentication"]) # Corrected Tag
async def register_user(user_data: user_schema.UserCreate, db: Session = Depends(get_db)):
    # Check if username from incoming data (user_data.username) already exists in the DB
    db_user_by_username = db.query(user_model.User).filter(user_model.User.username == user_data.username).first()
    if db_user_by_username:
        raise HTTPException(status_code=status.HTTP_400_BAD_REQUEST, detail="Username already registered")
    
    # Check if email from incoming data (user_data.email) already exists in the DB
    db_user_by_email = db.query(user_model.User).filter(user_model.User.email == user_data.email).first()
    if db_user_by_email:
        raise HTTPException(status_code=status.HTTP_400_BAD_REQUEST, detail="Email already registered")
    
    hashed_password = auth.get_password_hash(user_data.password)
    
    # Create an instance of the SQLAlchemy model (user_model.User)
    new_db_user = user_model.User( # Renamed from new_user for clarity
        username=user_data.username,
        email=user_data.email,
        hashed_password=hashed_password,
        is_admin=False # Ensure new users are NOT admins by default
    )
    
    db.add(new_db_user)
    db.commit()
    db.refresh(new_db_user)
    
    return new_db_user

@api_router.get("/users/me", response_model=user_schema.User, tags=["users"]) # Moved /users/me here
async def read_users_me(current_user: user_model.User = Depends(auth.get_current_active_user)):
    return current_user


# Include the api_router in the main app
app.include_router(api_router)


# The root path "/" is now outside the /api prefix
@app.get("/")
async def root():
    return {"message": "Welcome to the User Management API. API endpoints are under /api"}